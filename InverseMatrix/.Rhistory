cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
a <- available.packages()
a
View(a)
View(a)
a[100]
a[400]
a[4000]
a[3000]
a[2000]
a[3500]
a[2500]
a[2200]
a[2400]
a[2450]
install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
?iris
iris
iris[,1]
mean(iris[,1])
?rowmeans
rowMeans
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
data(mtcars)
mtcars
?mtcars
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
temp = sapply(split(mtcars$hp, mtcars$cyl), mean)
temp
temp[3]
temp[3]-temp[1]
debug(ls)
ls
debug(ls)
ls()
iris
mean(iris[,1])
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?iris
?iris
?iris
library(datasets)
datasets(iris)
data(iris)
iris
iris
?iris
library(datsets)
library(datasets)
data(iris)
?iris
iris
sapply(split(iris$Sepal.Length, iris$Species), mean)
with(iris, tapply(Sepal.Length, Species, mean))
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(!)
set.seed(1)
rpois(5, 2)
?qnorm
?rnorm
?set.seed
?dpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
e
x
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
system.time()
?system.time
?pnorm
a = c(-2,1,2,1,0,3,-2,1,0,0,5,1,0,0,0,1)
a
temp = matrix(a,row=4,byrow=TRUE)
temp = matrix(a,nrow=4,byrow=TRUE)
temp
temp = c(-2,1,2,1,0,3,-2,1,0,0,5,1,0,0,0,1)
a = matrix(temp,nrow=4,byrow=TRUE)
b = c(9,-1,8,2)
a
b
?seq
seq.int(10,1)
length(a)
length(a,1)
length(a[1])
length(a)
length(a[1,])
length(a[,1])
a
len = length(a[,1])
len
seq.int(len,1)
i = 1
a[i,i+1:end]
a[i,i+1:4]
a[i,i+1:3]
a
a
a[i,i+1:3]
temp = (b[i] - a[i,i+1:len-1]*x[i+1:len-1])/a[i,i]);
temp = (b[i] - a[i,i+1:len-1]*x[i+1:len-1])/a[i,i]
x = {}
temp = (b[i] - a[i,i+1:len-1]*x[i+1:len-1])/a[i,i]
temp
setwd("~/Documents/repos/num-methods/InverseMatrix")
source('solve_upper.R')
result = solve_upper(a,b)
source('solve_upper.R')
result = solve_upper(a,b)
temp = (b[i] - a[i,i+1:len-1]*x[i+1:len-1])/a[i,i]
a[i,i+1:len-1]
len
a[i,i+1:3]
a[i,i+1:len-1]
a[i,i:len]
a
b
source('solve_upper.R')
result = solve_upper(a,b)
source('solve_upper.R')
result = solve_upper(a,b)
temp = (b[i] - a[i,i:len]*x[i:len])/a[i,i]
temp
x
a[i,i+1:len]
i
len
i
a[3,4:4]
a[i,i+1:len]
i
len
a[3,4:4]
a[i,i+1:len]
a[3,3+1:len]
a[3,3+1:4]
a[3,4:4]
a[3,3+1:4]
a[3,(3+1):4]
a[3,(i+1):4]
a[3,(i+1):len]
a[i,(i+1):len]
a[i,(i+1):len]
a[i,(i+2):len]
source('solve_upper.R')
result = solve_upper(a,b)
result
result = solve_upper(a,b)
result
result = solve_upper(a,b)
source('solve_upper.R')
result = solve_upper(a,b)
source('solve_upper.R')
result = solve_upper(a,b)
temp = (b[i] - a[i,i:len]*x[i:len])/a[i,i]
temp
a[i,i:len]*x[i:len]
source('solve_upper.R')
result = solve_upper(a,b)
temp = (b[i] - a[i,i:len] %*% x[i:len])/a[i,i]
a[i,i:len]
a[i,i:len]
temp = (b[i] - a[i,i:len] %*% x[i:len])/a[i,i]
a[i,i:len]
x[i:len]
x
class(x)
type(x)
?calss
?class
class(b)
x = matrix(0, nrow = len, ncol = 1)
x
x = matrix(0, nrow = 1, ncol = len)
x
source('solve_upper.R')
result = solve_upper(a,b)
temp = (b[i] - a[i,i:len] %*% x[i:len])/a[i,i]
temp
x
source('solve_upper.R')
result = solve_upper(a,b)
result
source('solve_upper.R')
result = solve_upper(a,b)
temp = c(-2, 0, 0, 0,1 ,3,0, 0, 5, 1, 5, 0, 1, 2, 1, 3)
a = matrix(temp,nrow=4,byrow=TRUE)
a
b
source('solve_lower.R')
source('solve_lower.R')
result = solve_lower(a,b)
result
