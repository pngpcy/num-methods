cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
a <- available.packages()
a
View(a)
View(a)
a[100]
a[400]
a[4000]
a[3000]
a[2000]
a[3500]
a[2500]
a[2200]
a[2400]
a[2450]
install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
?iris
iris
iris[,1]
mean(iris[,1])
?rowmeans
rowMeans
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
data(mtcars)
mtcars
?mtcars
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
temp = sapply(split(mtcars$hp, mtcars$cyl), mean)
temp
temp[3]
temp[3]-temp[1]
debug(ls)
ls
debug(ls)
ls()
iris
mean(iris[,1])
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?iris
?iris
?iris
library(datasets)
datasets(iris)
data(iris)
iris
iris
?iris
library(datsets)
library(datasets)
data(iris)
?iris
iris
sapply(split(iris$Sepal.Length, iris$Species), mean)
with(iris, tapply(Sepal.Length, Species, mean))
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(!)
set.seed(1)
rpois(5, 2)
?qnorm
?rnorm
?set.seed
?dpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
e
x
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
system.time()
?system.time
?pnorm
a=c(2,3)
b=c(2,3,4)
a
b
c = c(a,v)
c = c(a,b)
c
?list
list(a,b)
r = list(a,b)
r
r[1]
r[2]
temp = c(7, 3, -1, 2, 3, 8, 1, -4, -1, 1, 4, -1, 2, -4, -1, 6)
A = matrix(temp, nrow = 4, byrow = TRUE)
A
temp = c(-1 0 -3 1)
temp = c(-1, 0, -3, 1)
b = matrix(temp, nrow=4, byrow = TRUE)
b
b = c(-1, 0, -3, 1)
b
size(A)
dim(A)
setwd("~/Documents/repos/num-methods/InverseMatrix/R")
dim(b)
b
dim(b)
dim(b)
length(b)
dim(A)
length(A)
length(b)
len_B = length(b)
len_B
len_A = length(A[,1])
?c
c(A,b)
A
c(A[,5], b)
?cbind
r = cbind(A,b)
r
b
A_aug = cbind(A,b)
A_aug
source('gaussian_elimination.R')
r = gaussian_elimination(A,b)
source('gaussian_elimination.R')
r = gaussian_elimination(A,b)
A_aug
fact = (A_aug[j,i]/A_aug[i,i])
fact
A_aug[j,i:end] = A_aug[j,i:end] - fact%*%A_aug[i,i:end]
fact%*%A_aug[i,i:end]
col_A_aug = length(A_aug[1,])
source('gaussian_elimination.R')
r = gaussian_elimination(A,b)
source('gaussian_elimination.R')
r = gaussian_elimination(A,b)
A_aug[j,i:col_A_aug] = A_aug[j,i:col_A_aug] - fact%*%A_aug[i,i:col_A_aug]
fact%*%A_aug[i,i:col_A_aug]
fact*A_aug[i,i:col_A_aug]
source('gaussian_elimination.R')
r = gaussian_elimination(A,b)
A_aug[j,i:col_A_aug] = A_aug[j,i:col_A_aug] - fact*A_aug[i,i:col_A_aug]
A_aug
A_aug
r = gaussian_elimination(A,b)
A_aug
A_aig
A_aug
A_aug
A_aug
A_aug
result = list(A_aug(,1:len_A), A_aug(,col_A_aug))
A_aug
result = list(A_aug[,1:len_A], A_aug[,col_A_aug])
result
r = gaussian_elimination(A,b)
source('gaussian_elimination.R')
r = gaussian_elimination(A,b)
result
r
